type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;

    import java.io.*;
    import java.math.RoundingMode;
    import java.text.DecimalFormat;
    import java.text.NumberFormat;
    import java.util.Locale;


    public class BudgetManager {
        private Budget budget;
        private final DecimalFormat df;
        private final String file;

        public BudgetManager() {
            budget = new Budget();
            file = "purchases.txt";
            df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ENGLISH);
            df.setRoundingMode(RoundingMode.HALF_EVEN);
            df.applyPattern("#0.00");
        }

        public void execute(Operation operation) {

            switch (operation) {
                case ADD_INCOME:
                    addIncome();
                    break;
                case ADD_PURCHASE:
                    addPurchase();
                    break;
                case SHOW_PURCHASES:
                    showPurchases();
                    break;
                case BALANCE:
                    showBalance();
                    break;
                case SAVE:
                    save();
                    break;
                case LOAD:
                    load();
                    break;
            }
        }

        private void save() {
            try (FileOutputStream fos = new FileOutputStream(file);
                 ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                oos.writeObject(budget);
                ConsoleHelper.printMessage("\nPurchases were saved!\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void load() {
            try (FileInputStream fis = new FileInputStream(file);
                 ObjectInputStream ois = new ObjectInputStream(fis)) {
                budget = (Budget) ois.readObject();
                ConsoleHelper.printMessage("\nPurchases were loaded!\n");
            } catch (ClassNotFoundException | IOException e) {
                e.printStackTrace();
            }
        }

        private void showBalance() {

            ConsoleHelper.printMessage("\nBalance: $" +
                    df.format(budget.getBalance()) + "\n");
        }

        private void showPurchases() {
            while (true) {
                ConsoleHelper.selectTypeMessage(Operation.SHOW_PURCHASES);
                Selectable op = ConsoleHelper.selectType(Operation.SHOW_PURCHASES);
                if (op == Operation.BACK) {
                    ConsoleHelper.printMessage("\n");
                    break;
                }

                double total = 0d;
                ConsoleHelper.printMessage("\n");
                for (Purchase p : budget.getPurchases()) {
                    if (op == Operation.ALL || p.getType() == op) {
                        ConsoleHelper.printMessage(p.getName() + " $"
                                + df.format(p.getPrice()));
                        total += p.getPrice();
                    }
                }

                if (total == 0) {
                    ConsoleHelper.printMessage("The purchase list is empty\n");
                    continue;
                }
                ConsoleHelper.printMessage("Total sum: $" + df.format(total) + "\n");
            }
        }

        private void addPurchase() {
            while (true) {
                ConsoleHelper.selectTypeMessage(Operation.ADD_PURCHASE);
                Selectable op = ConsoleHelper.selectType(Operation.ADD_PURCHASE);
                if (op == Operation.BACK) {
                    ConsoleHelper.printMessage("\n");
                    break;
                }

                ConsoleHelper.printMessage("\nEnter purchase name:");

                String name = "";
                while (name.isEmpty()) {
                    name = ConsoleHelper.readString();
                }

                ConsoleHelper.printMessage("Enter its price:");
                double price = ConsoleHelper.readDouble();

                budget.addMoney(-price);
                if (budget.getBalance() < 0) budget.setBalance(0);
                Purchase p = new Purchase(name, price);
                p.setType((PurchaseType) op);
                budget.addPurchase(p);
                ConsoleHelper.printMessage("Purchase was added!\n");
            }
        }

        private void addIncome() {
            ConsoleHelper.printMessage("\nEnter income:");
            double income = ConsoleHelper.readDouble();
            budget.addMoney(income);
            ConsoleHelper.printMessage("Income was added!\n");
        }

        public void init() {
            while (true) {
                ConsoleHelper.startMessage();
                Operation op = ConsoleHelper.selectOperation();
                if (op == Operation.EXIT) {
                    ConsoleHelper.exitMessage();
                    break;
                }
                execute(op);
            }
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: "��\0\x05sr\0\nbudget.Budget���F��v%\x02\0\x02D\0\abalanceL\0\tpurchasest\0\
    \x10Ljava/util/List;xp@��\x1e�Q�sr\0\x13java.util.ArrayListx��\x1d��a�\x03\0\x01\
    I\0\x04sizexp\0\0\0\x11w\x04\0\0\0\x11sr\0\x0fbudget.Purchase���w���.\x02\0\x03\
    D\0\x05priceL\0\x04namet\0\x12Ljava/lang/String;L\0\x04typet\0\x15Lbudget/PurchaseType;xp@A�\
    \n=p��t\0\vAlmond 250g~r\0\x13budget.PurchaseType\0\0\0\0\0\0\0\0\x12\0\0xr\0\x0e\
    java.lang.Enum\0\0\0\0\0\0\0\0\x12\0\0xpt\0\x04FOODsq\0~\0\x05@\f\0\0\0\0\0\0\
    t\0\x04Milkq\0~\0\fsq\0~\0\x05@\x17�\x8f\\(�t\0\x0eRed Fuji Appleq\0~\0\fsq\0\
    ~\0\x05@\x0f�\x1e�Q�t\0\x04Eggsq\0~\0\fsq\0~\0\x05@9��G�\x14{t\0\eFIJI Natural\
    \ Artesian Waterq\0~\0\fsq\0~\0\x05@!\x14z�G�\x14t\0\x1dHershey's milk chocolate\
    \ barsq\0~\0\fsq\0~\0\x05?�\0\0\0\0\0\0t\0\x1cGreat Value Broccoli Floretsq\0\
    ~\0\fsq\0~\0\x05@\x19\x1e�Q�\x1ft\0\x13Keystone Ground Beeq\0~\0\fsq\0~\0\x05\
    @!8Q�\x1e�t\0\tGildan LT~q\0~\0\nt\0\aCLOTHESsq\0~\0\x05@*\0\0\0\0\0\0t\0&Men's\
    \ Dual Defense Crew Socks 12 Pairsq\0~\0\x1esq\0~\0\x05@3�Q�\x1e�t\0!Wrangler\
    \ Men's Stretch Cargo Pantq\0~\0\x1esq\0~\0\x05@$333333t\0\x1cLEGO DUPLO Town\
    \ Farm Animals~q\0~\0\nt\0\nENTERTAINMENTsq\0~\0\x05@!u\x8f\\(�t\0\x06Cinemaq\0\
    ~\0&sq\0~\0\x05@>\0\0\0\0\0\0t\0\fSkate rentalq\0~\0&sq\0~\0\x05@3�p��\n=t\0\x1d\
    Sensodyne Pronamel Toothpaste~q\0~\0\nt\0\x05OTHERsq\0~\0\x05@$\0\0\0\0\0\0t\0\
    \x19Chick-fil-A $10 Gift Cardq\0~\0.sq\0~\0\x05@\f\0\0\0\0\0\0t\0\x04Debtq\0~\0\
    .x"
  learner_created: true
- name: src/budget/Operation.java
  visible: true
  text: |
    package budget;

    public enum Operation implements Selectable{
        ADD_INCOME,
        ADD_PURCHASE,
        SHOW_PURCHASES,
        BALANCE,
        EXIT,
        BACK,
        ALL,
        SAVE,
        LOAD
    }
  learner_created: true
- name: src/budget/Budget.java
  visible: true
  text: |
    package budget;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.List;

    public class Budget implements Serializable {
        private double balance;
        private List<Purchase> purchases;

        public Budget() {
            balance = 0d;
            purchases = new ArrayList<>();
        }

        public double getBalance() {
            return balance;
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public List<Purchase> getPurchases() {
            return purchases;
        }

        public void addPurchase(Purchase p){
            purchases.add(p);
        }

        public void addMoney(double amount){
            balance += amount;
        }
    }
  learner_created: true
- name: src/budget/ConsoleHelper.java
  visible: true
  text: |
    package budget;

    import java.util.Locale;
    import java.util.Scanner;

    public class ConsoleHelper {
        private static final Scanner scanner = new Scanner(System.in)
                .useLocale(Locale.ENGLISH);

        public static void startMessage() {
            String message = "Choose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "5) Save\n" +
                    "6) Load\n" +
                    "0) Exit";

            System.out.println(message);
        }

        public static void exitMessage() {
            System.out.println("\nBye!");
        }

        public static double readDouble() {
            return scanner.nextDouble();
        }

        public static String readString() {
            return scanner.nextLine();
        }

        public static void printMessage(String message) {
            System.out.println(message);
        }

        public static Operation selectOperation() {
            int num = scanner.nextInt();
            switch (num) {
                case 0:
                    return Operation.EXIT;
                case 1:
                    return Operation.ADD_INCOME;
                case 2:
                    return Operation.ADD_PURCHASE;
                case 3:
                    return Operation.SHOW_PURCHASES;
                case 4:
                    return Operation.BALANCE;
                case 5:
                    return Operation.SAVE;
                case 6:
                    return Operation.LOAD;
                default:
                    return null;
            }
        }

        public static void selectTypeMessage(Operation op) {
            String message = "\nChoose the type of purchase\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n";
            if (op == Operation.ADD_PURCHASE)
                message += "5) Back";
            else if (op == Operation.SHOW_PURCHASES)
                message += "5) All\n" +
                        "6) Back";
            ;


            System.out.println(message);
        }

        public static Selectable selectType(Operation op) {
            int num = scanner.nextInt();
            switch (num) {
                case 1:
                    return PurchaseType.FOOD;
                case 2:
                    return PurchaseType.CLOTHES;
                case 3:
                    return PurchaseType.ENTERTAINMENT;
                case 4:
                    return PurchaseType.OTHER;
                case 5: {
                    if (op == Operation.ADD_PURCHASE)
                        return Operation.BACK;
                    else return Operation.ALL;
                }
                case 6:
                    if (op == Operation.SHOW_PURCHASES) return Operation.BACK;
                default:
                    return null;
            }
        }
    }
  learner_created: true
- name: src/budget/Purchase.java
  visible: true
  text: |-
    package budget;

    import java.io.Serializable;

    public class Purchase implements Serializable {
        private String name;
        private double price;
        private PurchaseType type;

        public Purchase(String name, double price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }

        public PurchaseType getType() {
            return type;
        }

        public void setType(PurchaseType type) {
            this.type = type;
        }

        @Override
        public String toString() {
            return name + " $" + price;
        }
    }
    enum PurchaseType implements Selectable, Serializable{
        FOOD,
        CLOTHES,
        ENTERTAINMENT,
        OTHER
    }
  learner_created: true
- name: src/budget/Selectable.java
  visible: true
  text: |
    package budget;

    public interface Selectable {
    }
  learner_created: true
- name: src/budget/strategies/Strategy.java
  visible: true
  learner_created: true
- name: src/budget/strategies/SortAllStrategy.java
  visible: true
  learner_created: true
- name: src/budget/strategies/SortByTypeStrategy.java
  visible: true
  learner_created: true
- name: src/budget/strategies/SortCertainTypeStrategy.java
  visible: true
  learner_created: true
- name: src/budget/strategies/StrategyContext.java
  visible: true
  learner_created: true
- name: src/budget/PurchaseType.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7028#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 15 Feb 2022 11:39:58 UTC
record: -1

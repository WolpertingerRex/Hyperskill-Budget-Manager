type: edu
custom_name: stage4
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test1),

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test2),

                new TestCase<String>()
                    .setInput("4\n0")
                    .setCheckFunc(BudgetManagerTest::test3),

                new TestCase<String>()
                    .setInput("1\n400\n4\n1\n200\n4\n0")
                    .setCheckFunc(BudgetManagerTest::test4),

                new TestCase<String>()
                    .setInput("1\n1000\n2\n" +
                        "1\nAlmond 250g\n35.43\n" +
                        "1\nMilk\n3.50\n" +
                        "1\nRed Fuji Apple\n5.99\n" +
                        "1\nEggs\n3.99\n" +
                        "1\nFIJI Natural Artesian Water\n25.98\n" +
                        "1\nHershey's milk chocolate bars\n8.54\n" +
                        "1\nGreat Value Broccoli Florets\n1.00\n" +
                        "1\nKeystone Ground Bee\n6.28\n" +
                        "2\nGildan LT\n8.61\n" +
                        "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                        "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                        "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                        "3\nCinema\n8.73\n" +
                        "3\nSkate rental\n30\n" +
                        "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                        "4\nChick-fil-A $10 Gift Card\n10\n" +
                        "4\nDebt\n3.50\n" +
                        "5\n5\n0").setCheckFunc(BudgetManagerTest::test5),

                new TestCase<String>()
                    .setInput("6\n4\n3\n5\n1\n6\n0")
                    .setCheckFunc(BudgetManagerTest::test6)
            );
        }

        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                    "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                        "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 4\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                    "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                    "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 10\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                    "Balance is wrong after adding income!.\n" +
                        "Expected:\n" +
                        "Balance: $400.00\n" +
                        "Your output:\n" +
                        balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                    "Your program should create purchases.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 12\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                    "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28",
                "Gildan LT $8.61",
                "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                "Wrangler Men's Stretch Cargo Pant $19.97",
                "LEGO DUPLO Town Farm Animals $10.10",
                "Cinema $8.73",
                "Skate rental $30.00",
                "Sensodyne Pronamel Toothpaste $19.74",
                "Chick-fil-A $10 Gift Card $10.00",
                "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your all purchases list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of all purchases is wrong. Expected:\n" +
                        "Total sum: $214.36\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                    "Your all total sum is wrong!");
            }


            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[] {
                "Almond 250g $35.43",
                "Milk $3.50",
                "Red Fuji Apple $5.99",
                "Eggs $3.99",
                "FIJI Natural Artesian Water $25.98",
                "Hershey's milk chocolate bars $8.54",
                "Great Value Broccoli Florets $1.00",
                "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                        "Your food list doesn't have purchase:\n" +
                            expectedPurchase + "\n" +
                            "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Total sum of food list is wrong. Expected:\n" +
                        "Total sum: $90.71\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                    "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: "package budget;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\n\
    import java.text.NumberFormat;\nimport java.util.ArrayList;\nimport java.util.List;\n\
    import java.util.Locale;\n\n\npublic class BudgetManager {\n    private double\
    \ balance;\n    private final List<Purchase> purchases;\n    private final DecimalFormat\
    \ df;\n\n    public BudgetManager() {\n        balance = 0d;\n        purchases\
    \ = new ArrayList<>();\n        df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ENGLISH);\n\
    \        df.setRoundingMode(RoundingMode.HALF_EVEN);\n        df.applyPattern(\"\
    #0.00\");\n    }\n\n    public void execute(Operation operation){\n        switch\
    \ (operation){\n            case ADD_INCOME: addIncome();\n            break;\n\
    \            case ADD_PURCHASE: addPurchase();\n            break;\n         \
    \   case SHOW_PURCHASES: showPurchases();\n            break;\n            case\
    \ BALANCE: showBalance();\n            break;\n        }\n    }\n\n    private\
    \ void showBalance() {\n     \n        ConsoleHelper.printMessage(\"\\nBalance:\
    \ $\" + df.format(balance) + \"\\n\");\n    }\n\n    private void showPurchases()\
    \ {\n        while (true) {\n            ConsoleHelper.selectTypeMessage(Operation.SHOW_PURCHASES);\n\
    \            Selectable op = ConsoleHelper.selectType(Operation.SHOW_PURCHASES);\n\
    \            if (op == Operation.BACK) {\n                ConsoleHelper.printMessage(\"\
    \\n\");\n                break;\n            }\n\n            double total = 0d;\n\
    \            ConsoleHelper.printMessage(\"\\n\");\n            for (Purchase p\
    \ : purchases) {\n                if(op == Operation.ALL || p.getType() == op)\
    \ {\n                    ConsoleHelper.printMessage(p.toString());\n         \
    \           total += p.getPrice();\n                }\n            }\n\n     \
    \       if (total == 0) {\n                ConsoleHelper.printMessage(\"The purchase\
    \ list is empty\\n\");\n                continue;\n            }\n           \
    \ ConsoleHelper.printMessage(\"Total sum: $\" + df.format(total) + \"\\n\");\n\
    \        }\n    }\n\n    private void addPurchase() {\n       while(true) {\n\
    \           ConsoleHelper.selectTypeMessage(Operation.ADD_PURCHASE);\n       \
    \    Selectable op = ConsoleHelper.selectType(Operation.ADD_PURCHASE);\n     \
    \      if (op == Operation.BACK) {\n               ConsoleHelper.printMessage(\"\
    \\n\");\n               break;\n           }\n\n           ConsoleHelper.printMessage(\"\
    \\nEnter purchase name:\");\n\n           String name = \"\";\n           while\
    \ (name.isEmpty()) {\n               name = ConsoleHelper.readString();\n    \
    \       }\n\n           ConsoleHelper.printMessage(\"Enter its price:\");\n  \
    \         double price = ConsoleHelper.readDouble();\n\n           balance -=\
    \ price;\n           if (balance < 0) balance = 0;\n           Purchase p = new\
    \ Purchase(name, price);\n           p.setType((PurchaseType) op);\n         \
    \  purchases.add(p);\n           ConsoleHelper.printMessage(\"Purchase was added!\\\
    n\");\n       }\n    }\n\n    private void addIncome() {\n        ConsoleHelper.printMessage(\"\
    \\nEnter income:\");\n        double income = ConsoleHelper.readDouble();\n  \
    \      balance += income;\n        ConsoleHelper.printMessage(\"Income was added!\\\
    n\");\n    }\n\n    public void init(){\n        while(true){\n            ConsoleHelper.startMessage();\n\
    \            Operation op = ConsoleHelper.selectOperation();\n            if (op\
    \ == Operation.EXIT) {\n                ConsoleHelper.exitMessage();\n       \
    \         break;\n            }\n            execute(op);\n        }\n    }\n\
    }\n"
  learner_created: true
- name: src/budget/Operation.java
  visible: true
  text: |
    package budget;

    public enum Operation implements Selectable{
        ADD_INCOME,
        ADD_PURCHASE,
        SHOW_PURCHASES,
        BALANCE,
        EXIT,
        BACK,
        ALL
    }
  learner_created: true
- name: src/budget/ConsoleHelper.java
  visible: true
  text: |
    package budget;

    import java.util.Locale;
    import java.util.Scanner;

    public class ConsoleHelper {
        private static final Scanner scanner = new Scanner(System.in)
                .useLocale(Locale.ENGLISH);

        public static void startMessage() {
            String message = "Choose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "0) Exit";

            System.out.println(message);
        }

        public static void exitMessage() {
            System.out.println("\nBye!");
        }

        public static double readDouble() {
            return scanner.nextDouble();
        }

        public static String readString() {
            return scanner.nextLine();
        }

        public static void printMessage(String message) {
            System.out.println(message);
        }

        public static Operation selectOperation() {
            int num = scanner.nextInt();
            switch (num) {
                case 0:
                    return Operation.EXIT;
                case 1:
                    return Operation.ADD_INCOME;
                case 2:
                    return Operation.ADD_PURCHASE;
                case 3:
                    return Operation.SHOW_PURCHASES;
                case 4:
                    return Operation.BALANCE;
                default:
                    return null;
            }
        }

        public static void selectTypeMessage(Operation op) {
            String message = "\nChoose the type of purchase\n" +
                    "1) Food\n" +
                    "2) Clothes\n" +
                    "3) Entertainment\n" +
                    "4) Other\n";
            if (op == Operation.ADD_PURCHASE)
                message += "5) Back";
            else if (op == Operation.SHOW_PURCHASES)
                message += "5) All\n" +
                        "6) Back";
            ;


            System.out.println(message);
        }

        public static Selectable selectType(Operation op) {
            int num = scanner.nextInt();
            switch (num) {
                case 1:
                    return PurchaseType.FOOD;
                case 2:
                    return PurchaseType.CLOTHES;
                case 3:
                    return PurchaseType.ENTERTAINMENT;
                case 4:
                    return PurchaseType.OTHER;
                case 5: {
                    if (op == Operation.ADD_PURCHASE)
                        return Operation.BACK;
                    else return Operation.ALL;
                }
                case 6:
                    if (op == Operation.SHOW_PURCHASES) return Operation.BACK;
                default:
                    return null;
            }
        }
    }
  learner_created: true
- name: src/budget/Purchase.java
  visible: true
  text: |-
    package budget;

    public class Purchase {
        private String name;
        private double price;
        private PurchaseType type;

        public Purchase(String name, double price) {
            this.name = name;
            this.price = price;
        }

        public double getPrice() {
            return price;
        }

        public PurchaseType getType() {
            return type;
        }

        public void setType(PurchaseType type) {
            this.type = type;
        }

        @Override
        public String toString() {
            return name + " $" + price;
        }
    }
    enum PurchaseType implements Selectable{
        FOOD,
        CLOTHES,
        ENTERTAINMENT,
        OTHER
    }
  learner_created: true
- name: src/budget/Selectable.java
  visible: true
  text: |
    package budget;

    public interface Selectable {
    }
  learner_created: true
- name: src/budget/files/Main.java
  visible: true
  learner_created: true
- name: src/budget/Budget.java
  visible: true
  learner_created: true
- name: purchases.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7027#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 15 Feb 2022 08:21:23 UTC
record: 4

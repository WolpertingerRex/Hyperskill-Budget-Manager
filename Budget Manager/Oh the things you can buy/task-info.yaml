type: edu
custom_name: stage3
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.BiFunction;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test1),

                new TestCase<String>()
                    .setInput("0\n")
                    .setCheckFunc(BudgetManagerTest::test2),

                new TestCase<String>()
                    .setInput("4\n0")
                    .setCheckFunc(BudgetManagerTest::test3),

                new TestCase<String>()
                    .setInput("1\n400\n4\n1\n200\n4\n0")
                    .setCheckFunc(BudgetManagerTest::test4),

                new TestCase<String>()
                    .setInput("1\n600\n2\n" +
                        "1\nMilk\n3.5\n" +
                        "2\nMen's Dual Defense Crew Socks 12 Pairs\n13\n" +
                        "3\nCinema\n8.73\n" +
                        "5\n3\n1\n2\n3\n5\n6\n0")
                    .setCheckFunc(BudgetManagerTest::test5)

            );
        }

        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                    "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                        "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 4\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                    "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                    "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);

        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 10\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                    "Balance is wrong after adding income!.\n" +
                        "Expected:\n" +
                        "Balance: $400.00\n" +
                        "Your output:\n" +
                        balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }


        //Checking adding purchase
        private static CheckResult test5(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                    "Your program shows wrong blocks of output. Expected: 22\n" +
                        "You have: " + blocks.length + "\n" +
                        "Make sure that you print an empty line after each chosen action");
            }


            //Food
            String foodList = blocks[12];
            if (!foodList.contains("Milk")) {
                return new CheckResult(false,
                    "Wrong food purchase list.\n" +
                        "Expected:\n" +
                        "Food:\n" +
                        "Milk $3.50\n" +
                        "Total sum: $3.50\n" +
                        "Your output:\n" + foodList);
            }

            String[] temp = foodList.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your food total sum is wrong!\n" +
                        "Expected:\n" +
                        "Total sum: $3.50\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 3.5) > 0.0001) {
                return new CheckResult(false,
                    "Your food total sum is wrong!");
            }

            //Clothes
            String clothesList = blocks[14];

            if (!clothesList.contains("Men's Dual Defense Crew Socks 12 Pairs")) {
                return new CheckResult(false,
                    "Wrong clothes purchase list.\nExpected:\n" +
                        "Clothes:\n" +
                        "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                        "Total sum: $13.00\n" +
                        "Your output:\n" + clothesList);
            }

            temp = clothesList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your clothes total sum is wrong!\n" +
                        "Expected:\n" +
                        "Total sum: $13.00\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double clothesTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(clothesTotalSum - 13) > 0.0001) {
                return new CheckResult(false,
                    "Your clothes total sum is wrong!");
            }

            //Entertainment
            String entertainmentList = blocks[16];

            if (!entertainmentList.contains("Cinema")) {
                return new CheckResult(false,
                    "Wrong entertainment purchase list.\nExpected:\n" +
                        "Entertainment:\n" +
                        "Cinema $8.73\n" +
                        "Total sum: $8.73\n" +
                        "Your output:\n" + entertainmentList);
            }

            temp = entertainmentList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your entertainment total sum is wrong!\n" +
                        "Expected:\n" +
                        "Total sum: $8.73\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double entertainmentTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(entertainmentTotalSum - 8.73) > 0.0001) {
                return new CheckResult(false,
                    "Your entertainment total sum is wrong!");
            }

            //All
            String allList = blocks[18];

            if (!allList.contains("Milk")
                || !allList.contains("Men's Dual Defense Crew Socks 12 Pairs")
                || !allList.contains("Cinema")) {
                return new CheckResult(false,
                    "Wrong all purchase list.\n" +
                        "Expected:\n" +
                        "All:\n" +
                        "Milk $3.50\n" +
                        "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                        "Cinema $8.73\n" +
                        "Total sum: $25.23" +
                        "Your output:\n" + allList);
            }

            temp = allList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                    "Your all total sum is wrong!\n" +
                        "Expected:\n" +
                        "Total sum: $25.23\n" +
                        "Your output:\n" +
                        totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 25.23) > 0.0001) {
                return new CheckResult(false,
                    "Your all total sum is wrong!");
            }


            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;

    import java.math.RoundingMode;
    import java.text.DecimalFormat;
    import java.text.NumberFormat;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;

    public class BudgetManager {
        private double balance;
        private final List<Purchase> purchases;
        private final DecimalFormat df;

        public BudgetManager() {
            balance = 0d;
            purchases = new ArrayList<>();
            df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ENGLISH);
            df.setRoundingMode(RoundingMode.HALF_EVEN);
            df.applyPattern("#0.00");
        }

        public void execute(Operation operation){
            switch (operation){
                case ADD_INCOME: addIncome();
                break;
                case ADD_PURCHASE: addPurchase();
                break;
                case SHOW_PURCHASES: showPurchases();
                break;
                case BALANCE: showBalance();
                break;
            }
        }

        private void showBalance() {

            ConsoleHelper.printMessage("\nBalance: $" + df.format(balance) + "\n");
        }

        private void showPurchases() {
            if(purchases.isEmpty()) {
                ConsoleHelper.printMessage("\nThe purchase list is empty\n");
                return;
            }
            double total = 0d;
            ConsoleHelper.printMessage("\n");
            for (Purchase p : purchases){
                ConsoleHelper.printMessage(p.toString());
                total += p.getPrice();
            }
            ConsoleHelper.printMessage("Total sum: $" + df.format(total) + "\n");
        }

        private void addPurchase() {
            ConsoleHelper.printMessage("\nEnter purchase name:");

            String name = "";
            while(name.isEmpty()){
               name = ConsoleHelper.readString();
            }

            ConsoleHelper.printMessage("Enter its price:");
            double price = ConsoleHelper.readDouble();

            balance -= price;
            if (balance < 0) balance = 0;
            purchases.add(new Purchase(name, price));
            ConsoleHelper.printMessage("Purchase was added!\n");
        }

        private void addIncome() {
            ConsoleHelper.printMessage("\nEnter income:");
            double income = ConsoleHelper.readDouble();
            balance += income;
            ConsoleHelper.printMessage("Income was added!\n");
        }

        public void init(){
            while(true){
                ConsoleHelper.startMessage();
                Operation op = ConsoleHelper.getOperation();
                if (op == Operation.EXIT) {
                    ConsoleHelper.exitMessage();
                    break;
                }
                execute(op);
            }
        }



    }
  learner_created: true
- name: src/budget/Operation.java
  visible: true
  text: |
    package budget;

    public enum Operation {
        ADD_INCOME,
        ADD_PURCHASE,
        SHOW_PURCHASES,
        BALANCE,
        EXIT
    }
  learner_created: true
- name: src/budget/ConsoleHelper.java
  visible: true
  text: |
    package budget;

    import java.util.Locale;
    import java.util.Scanner;

    public class ConsoleHelper {
        private static final Scanner scanner = new Scanner(System.in)
                .useLocale(Locale.ENGLISH);

        public static void startMessage() {
            String message = "Choose your action:\n" +
                    "1) Add income\n" +
                    "2) Add purchase\n" +
                    "3) Show list of purchases\n" +
                    "4) Balance\n" +
                    "0) Exit";

            System.out.println(message);
        }

        public static void exitMessage() {
            System.out.println("\nBye!");
        }

        public static double readDouble() {
            return scanner.nextDouble();
        }

        public static String readString() {
           return scanner.nextLine();
        }

        public static void printMessage(String message) {
            System.out.println(message);
        }

        public static Operation getOperation() {
            int num = scanner.nextInt();
            switch (num) {
                case 0:
                    return Operation.EXIT;
                case 1:
                    return Operation.ADD_INCOME;
                case 2:
                    return Operation.ADD_PURCHASE;
                case 3:
                    return Operation.SHOW_PURCHASES;
                case 4:
                    return Operation.BALANCE;
                default:
                    return null;
            }
        }
    }
  learner_created: true
- name: src/budget/Purchase.java
  visible: true
  text: |
    package budget;

    public class Purchase {
        private String name;
        private double price;

        public Purchase(String name, double price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }

        @Override
        public String toString() {
            return name + " $" + price;
        }
    }
  learner_created: true
- name: src/budget/Selectable.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7026#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 14 Feb 2022 16:43:59 UTC
record: 3
